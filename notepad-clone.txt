package notepad;

import java.awt.FileDialog;
import java.awt.Font;
import java.awt.Image;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;

import javax.swing.JFrame;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;

public class Notepad2 
{	
	JFrame frame ;
	JTextArea textArea ;
	JMenuBar menuBar;
	JMenu fileMenu , languageMenu, formatMenu , commandPromptMenu ; 
	JMenuItem itemNew , itemNewWindow ,itemOpen,itemSave, itemSaveAs, itemExit ;
	JMenuItem itemWordWrap,itemFont, itemFontSize ;
	JMenuItem itemCMD;
	
	String openFileName = null;
	String openPath = null;
	boolean wrap = false;
	Font arial,timesNewRoman,consolas;
	String fontStyle = "Arial";
	
	public Notepad2() 
	{
		createFrame(); 							
		createTextArea();
		createScrollBars();
		createMenuBar();
		createFileMenuItems();
		createFormatItem();
		createCommandPromptItem();
		createLanguageMenuItems();
	}
	
	//Creating the frame 
	public void createFrame() 
	{
	 frame = new JFrame ("NotePad");
	 frame.setSize(1200, 900);;
	 Image icon= Toolkit.getDefaultToolkit().getImage("D:\\QspLogo.jpg");
	 frame.setIconImage(icon);
	 frame.setVisible(true);	
	 frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
	}
	
	public void createTextArea() 
	{
		textArea = new JTextArea();
		textArea.setFont(new Font("Arial",Font.PLAIN,14));
		frame.add(textArea);			
	}

	public void createScrollBars() {
		JScrollPane scroll = new JScrollPane (textArea,JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED, JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED); //for scrolling vertical and horizontal 
		frame.add(scroll);
	}
	
	public void createMenuBar() 
	{
		menuBar = new JMenuBar();
		frame.setJMenuBar(menuBar);
		fileMenu = new JMenu("File");
		menuBar.add(fileMenu);
		languageMenu = new JMenu("Languages");
		menuBar.add(languageMenu);
		formatMenu = new JMenu("Format");
		menuBar.add(formatMenu);
		commandPromptMenu = new JMenu("Command Prompt");
		menuBar.add(commandPromptMenu);
	}
	
	public void createFileMenuItems() {
		itemNew = new JMenuItem ("New");
		itemNew.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
		
				textArea.setText("");
				frame.setTitle("Untitled - Notepad");
				
				openFileName = null;
				openPath = null;
				
			}
		});
		
		fileMenu.add(itemNew);
		
		itemNewWindow = new JMenuItem ("New Window");
		itemNewWindow.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
			
				Notepad2 n1 = new Notepad2();
				n1.frame.setTitle("Untitled - Notepad");
				
			}
		});
			
		fileMenu.add(itemNewWindow);
		
		itemOpen = new JMenuItem("Open");
		itemOpen.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
		
				FileDialog fd = new FileDialog(frame, "Open",FileDialog.LOAD);
				fd.setVisible(true);
				String file = fd.getFile();
				String path = fd.getDirectory();
				
				if(file != null)
				{
					frame.setTitle(file);
					
					openFileName = file;
					openPath = path;
				}
				BufferedReader br = null;
				
				try 
				{
					br = new BufferedReader(new FileReader(path+file));
					
					String sentence = br.readLine();
					textArea.setText("");
					while(sentence!=null)
					{
						textArea.append(sentence+"\n");
						sentence= br.readLine();
					}
				}
				catch (FileNotFoundException e1) 
				{

					System.out.println("File not Found!");
				}
				catch (IOException e2)
				{
					System.out.println("Data Could not be read!");
				}
				catch (NullPointerException e1)
				{
					
				}
				
				finally
				{
					try 
					{
						br.close();
					} 
					catch (IOException e1) 
					{
						System.out.println("File Could not be Closed!");				
					}
					catch (NullPointerException e2)
					{
						
					}
				}
			}
		});
		
		fileMenu.add(itemOpen);
	
		itemSave = new JMenuItem("Save");
		itemSave.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				
				if(openFileName != null && openPath != null)
				{
					writeDataToFile(openFileName,openPath);
				}
				else 
				{
					FileDialog fd = new FileDialog(frame,"Save As",FileDialog.SAVE);
					fd.setVisible(true);
					String path = fd.getDirectory();
					String file = fd.getFile();
					
					if(path != null && file != null)
					{
						writeDataToFile(file , path);
						openFileName = file;
						openPath = path;
						frame.setTitle(openPath+openFileName);					
					}
					
				}
			}
		});
		
		fileMenu.add(itemSave);

		
		itemSaveAs = new JMenuItem ("SaveAs");
		itemSaveAs.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) 
			{
				FileDialog fd = new FileDialog(frame,"Save As",FileDialog.SAVE);
				fd.setVisible(true);
				String path = fd.getDirectory();
				String filename = fd.getFile();
				BufferedWriter bw = null;
				if(filename != null && path != null) 
				{
					try 
					{
						bw = new BufferedWriter( new FileWriter(path+filename));
						String text = textArea.getText();
						bw.write(text);
						
						
					} 
					catch (IOException e1) 
					{
						System.out.println("Data could not be written");
					}
					
					finally
					{
						try 
						{
							bw.close();
						} 
						catch (IOException e1) 
						{
							System.out.println("Data could not be written");
						}
					}
				}
			}
		});
		
		fileMenu.add(itemSaveAs);
	

		
		itemExit = new JMenuItem("Exit");
		itemExit.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				
				frame.dispose();
			}
		});
		fileMenu.add(itemExit);
	}
	
	public void createLanguageMenuItems()
	{
		JMenuItem itemJava = new JMenuItem("Java");
		itemJava.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
			
				setLanguage("Java.java");
				}
		});
		languageMenu.add(itemJava);
		
		JMenuItem itemHTML = new JMenuItem("HTML");
		itemHTML.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
		
				setLanguage("HTML.html");
			}
		});
		languageMenu.add(itemHTML);
		
		JMenuItem itemC = new JMenuItem("C");
		itemC.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
			
				setLanguage("C.c");
			}
		});
		languageMenu.add(itemC);
		
		JMenuItem itemCpp = new JMenuItem("C++");
		itemCpp.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
		
				setLanguage("C++.cpp");
			}
		});
		languageMenu.add(itemCpp);
		
		JMenuItem itemPerl = new JMenuItem("Perl");
		itemPerl.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
			
				setLanguage("Perl.pl");
				}
		});
		languageMenu.add(itemPerl);
	}
	
	public void setLanguage(String language)
	{
		BufferedReader br = null;
		
		try 
		{
			br = new BufferedReader(new FileReader("D:\\notepad\\"+language));
			
			String sentence = br.readLine();
			textArea.setText("");
			while(sentence!=null)
			{
				textArea.append(sentence+"\n");
				sentence= br.readLine();
			}
		}
		catch (FileNotFoundException e1) 
		{

			System.out.println("File not Found!");
		}
		catch (IOException e2)
		{
			System.out.println("Data Could not be read!");
		}
		catch (NullPointerException e1)
		{
			
		}
		
		finally
		{
			try 
			{
				br.close();
			} 
			catch (IOException e1) 
			{
				System.out.println("File Could not be Closed!");				
			}
			catch (NullPointerException e2)
			{
				
			}
		}

	}
	
	public void createFormatItem() {
		itemWordWrap =new JMenuItem ("Word Wrap Off");
		itemWordWrap.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
		
				if(wrap == false)
				{
				textArea.setLineWrap(true);
				textArea.setWrapStyleWord(true);
				wrap = true;
				itemWordWrap.setText("Word Wrap On");
				}
				
				else
				{
					textArea.setLineWrap(false);
					textArea.setWrapStyleWord(false);
					wrap = false;
					itemWordWrap.setText("Word Wrap Off");
				}
			}
		});
		formatMenu.add(itemWordWrap);
		
		itemFont = new JMenu ("Font");
		
		
		JMenuItem itemArial = new JMenuItem("Arial");
		itemArial.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
		
				setFontType("Arial");
			}
		});
		JMenuItem itemTimesNewRoman = new JMenuItem("Times New Roman");
		itemTimesNewRoman.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
		
				setFontType("Times New Roman");
			}
		});
		JMenuItem itemConsolas = new JMenuItem("Consolas");
		itemConsolas.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
		
				setFontType("Consolas");
			}
		});
		
		itemFont.add(itemArial);
		itemFont.add(itemTimesNewRoman);
		itemFont.add(itemConsolas);
		
		
		
		formatMenu.add(itemFont);
		
		itemFontSize = new JMenu ("Font Size");
		formatMenu.add(itemFontSize);
		
		JMenuItem size10 = new JMenuItem("10");
		size10.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
		
				setFontSize(10);
			}
		});
		
		JMenuItem size14 = new JMenuItem("14");
		size14.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
		
				setFontSize(14);
			}
		});
		
		JMenuItem size18 = new JMenuItem("18");
		size18.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
		
				setFontSize(18);
			}
		});
		
		JMenuItem size20 = new JMenuItem("20");
		size20.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
		
				setFontSize(20);
			}
		});
		
		JMenuItem size22 = new JMenuItem("22");
		size22.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
		
				setFontSize(22);
			}
		});
		
		JMenuItem size26 = new JMenuItem("26");
		size26.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
		
				setFontSize(26);
			}
		});
		
		JMenuItem size30 = new JMenuItem("30");
		size30.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
		
				setFontSize(30);
			}
		});
		
		JMenuItem size34 = new JMenuItem("34");
		size34.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
		
				setFontSize(34);
			}
		});
		
		itemFontSize.add(size10);
		itemFontSize.add(size14);
		itemFontSize.add(size18);
		itemFontSize.add(size20);
		itemFontSize.add(size22);
		itemFontSize.add(size26);
		itemFontSize.add(size30);
		itemFontSize.add(size34);
	}
	
	public void setFontSize(int size)
	{	
		
		arial = new Font("Arial", Font.PLAIN, size);
		timesNewRoman = new Font("Times New Romes", Font.PLAIN,size);
		consolas = new Font("Consolas",Font.PLAIN,size);	
		setFontType(fontStyle);
	}
	
	public void setFontType(String fontName)
	{
		fontStyle = fontName;
		switch(fontName)
		{
		case "Arial":
			textArea.setFont(arial);
			break;
			
		case "Times New Roman":
			textArea.setFont(timesNewRoman);
			break;
			
		case "Consolas":
			textArea.setFont(consolas);
			break;
			
		default:
			break;
		}
		
	}
	
	public void createCommandPromptItem() 
	 {
		 itemCMD =new JMenuItem ("Open CMD");
		 itemCMD.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
		
				try
				{
				if(openPath != null)
				{
				  Runtime.getRuntime().exec(new String[] {"cmd","/K","start"},null,new File(openPath));
				}
				} catch (IOException e1) 
				
				{
					try {
						Runtime.getRuntime().exec(new String[] {"cmd","/K","start"},null,null);
					} catch (IOException e2) {
						System.out.println("Could not launch CMD");
					}
					System.out.println("Could not launch CMD");
				}
			}
		});
		 commandPromptMenu.add(itemCMD);
	 }	

	public void writeDataToFile(String filenmame, String path)
	 {
		 BufferedWriter bw = null;
		try 
		{
		 bw = new BufferedWriter(new FileWriter(path+openFileName));
		 String text = textArea.getText();
		 bw.write(text);
		}
		catch (IOException e) 
		{
			System.out.println("Data cannot be written!");
		}
		finally 
		{
			try 
			{
				bw.close();
			}
			catch(IOException e)
			{
				System.out.println("File cannot be closed");
			}
			catch(NullPointerException e)
			{
				System.out.println("File not found to close");
			}
		}
		 
	 }

}